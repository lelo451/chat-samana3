unit uFrmChat;
interface
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, Data.DB,
  Vcl.Grids, Vcl.DBGrids, FireDAC.Stan.Param, Vcl.Buttons,System.Notification,
  System.ImageList, Vcl.ImgList, uDm, uUsuario;
type
  TFrmChat = class(TForm)
    PanelTop: TPanel;
    LbApelido: TLabel;
    LbStatus: TLabel;
    DSUsuario: TDataSource;
    PanelChat: TPanel;
    MChatConteudo: TMemo;
    EdTexto: TEdit;
    Timer01: TTimer;
    Panel2: TPanel;
    BtnEnviar: TSpeedButton;
    ImageList: TImageList;
    Panel1: TPanel;
    DBGrid: TDBGrid;
    BtnConversar: TButton;
    procedure FormShow(Sender: TObject);
    procedure Timer01Timer(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure BtnChatClearClick(Sender: TObject);
    procedure EdTextoKeyPress(Sender: TObject; var Key: Char);
    procedure BtnEnviarClick(Sender: TObject);
    procedure NotificationCenter1PermissionRequestResult(Sender: TObject;
      const AIsGranted: Boolean);
    procedure BtnConversarClick(Sender: TObject);
    procedure DBGridDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure FormDestroy(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private

    { Private declarations }
  public
    { Public declarations }
    procedure UpdateMemo();
  end;
var
  FrmChat: TFrmChat;
  mensagem : Integer;
implementation
{$R *.dfm}

uses
  uFrmSingleChat;

//Verifica se campo vazio e salva a mensagem no banco
procedure TFrmChat.BtnEnviarClick(Sender: TObject);
var
  Mensagem, From: String;
begin
  if EdTexto.Text <> '' then
    begin
      uUsuario.Usuario.Mensagens(EdTexto.Text);
      uUsuario.Usuario.UpdateChat;
      EdTexto.Clear;
      EdTexto.SetFocus;
    end
    else
    begin
      ShowMessage('Campo de mensagem vázio.');
    end;
end;

//Coloca um imagem para mostrar Online/Offline
procedure TFrmChat.DBGridDrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  inherited;
  if Column.FieldName = 'ONLINE' then
  begin
    DBGrid.Canvas.FillRect(Rect);
    ImageList.Draw(TDBGrid(Sender).Canvas, Rect.Left + 10, Rect.Top + 1, -1);
    if Column.Field.AsInteger = 1 then
      ImageList.Draw(TDBGrid(Sender).Canvas, Rect.Left + 10, Rect.Top + 1, 0)
    else
      ImageList.Draw(TDBGrid(Sender).Canvas, Rect.Left + 10, Rect.Top + 1, 1);
  end;
end;

//Chama a conversa particular
procedure TFrmChat.BtnConversarClick(Sender: TObject);
begin
  uUsuario.Usuario.Destinatario := DBGrid.Columns.Items[2].Field.Text;
  uUsuario.Usuario.NomeDes      := DBGrid.Columns.Items[0].Field.Text;
  if uUsuario.Usuario.Destinatario <> uUsuario.Usuario.Email then
  begin
    FrmSingleChat := TFrmSingleChat.Create(NIL);
    uFrmSingleChat.FrmSingleChat.ShowModal;
  end
  else
    ShowMessage('Não pode falar com você mesmo!');
end;

//Aperta o botão enter
procedure TFrmChat.EdTextoKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
    begin
      BtnEnviar.Click;
    end;
end;

//Limpa caixa de texto
procedure TFrmChat.BtnChatClearClick(Sender: TObject);
begin
  EdTexto.Clear;
end;

//Quando fechar
procedure TFrmChat.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  uUsuario.Usuario.UpdateOffline;
  Timer01.Enabled := False;
end;

procedure TFrmChat.FormCreate(Sender: TObject);
begin

end;

//Evento para quando for fechado colocar com desligado
procedure TFrmChat.FormDestroy(Sender: TObject);
begin
  uUsuario.Usuario.UpdateOffline;
  Timer01.Enabled := False;
end;

//Configuração de quando abre (OnShow)
procedure TFrmChat.FormShow(Sender: TObject);
begin
  DSUsuario.DataSet.Active := true;
  MChatConteudo.Lines.Add(uUsuario.Usuario.MensagensHistorico);
  uUsuario.Usuario.MensagensHistorico;
  uUsuario.Usuario.UpdateOnline;
  Timer01.Enabled := True;
  LbApelido.Caption := uUsuario.Usuario.Apelido;
  LbStatus.Caption := 'ONLINE';
  end;

//Notifição da mensagem enviada
procedure TFrmChat.NotificationCenter1PermissionRequestResult(Sender: TObject;
  const AIsGranted: Boolean);
begin
     showmessage('Enviei');
end;

//Quando timer está ativo
procedure TFrmChat.Timer01Timer(Sender: TObject);
begin
  uUsuario.Usuario.UpdateChat;
  DSUsuario.DataSet.Refresh;
end;

//Atualiza o chat de conversa
procedure TFrmChat.UpdateMemo();
begin
  FrmChat.MChatConteudo.Clear;
  uUsuario.Usuario.MensagensHistorico;
end;

end.
